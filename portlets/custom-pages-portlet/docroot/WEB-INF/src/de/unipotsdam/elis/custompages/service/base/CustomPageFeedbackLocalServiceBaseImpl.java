/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.unipotsdam.elis.custompages.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import de.unipotsdam.elis.custompages.model.CustomPageFeedback;
import de.unipotsdam.elis.custompages.service.CustomPageFeedbackLocalService;
import de.unipotsdam.elis.custompages.service.persistence.CustomPageFeedbackFinder;
import de.unipotsdam.elis.custompages.service.persistence.CustomPageFeedbackPK;
import de.unipotsdam.elis.custompages.service.persistence.CustomPageFeedbackPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the custom page feedback local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link de.unipotsdam.elis.custompages.service.impl.CustomPageFeedbackLocalServiceImpl}.
 * </p>
 *
 * @author Matthias
 * @see de.unipotsdam.elis.custompages.service.impl.CustomPageFeedbackLocalServiceImpl
 * @see de.unipotsdam.elis.custompages.service.CustomPageFeedbackLocalServiceUtil
 * @generated
 */
public abstract class CustomPageFeedbackLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements CustomPageFeedbackLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link de.unipotsdam.elis.custompages.service.CustomPageFeedbackLocalServiceUtil} to access the custom page feedback local service.
	 */

	/**
	 * Adds the custom page feedback to the database. Also notifies the appropriate model listeners.
	 *
	 * @param customPageFeedback the custom page feedback
	 * @return the custom page feedback that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CustomPageFeedback addCustomPageFeedback(
		CustomPageFeedback customPageFeedback) throws SystemException {
		customPageFeedback.setNew(true);

		return customPageFeedbackPersistence.update(customPageFeedback);
	}

	/**
	 * Creates a new custom page feedback with the primary key. Does not add the custom page feedback to the database.
	 *
	 * @param customPageFeedbackPK the primary key for the new custom page feedback
	 * @return the new custom page feedback
	 */
	@Override
	public CustomPageFeedback createCustomPageFeedback(
		CustomPageFeedbackPK customPageFeedbackPK) {
		return customPageFeedbackPersistence.create(customPageFeedbackPK);
	}

	/**
	 * Deletes the custom page feedback with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param customPageFeedbackPK the primary key of the custom page feedback
	 * @return the custom page feedback that was removed
	 * @throws PortalException if a custom page feedback with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CustomPageFeedback deleteCustomPageFeedback(
		CustomPageFeedbackPK customPageFeedbackPK)
		throws PortalException, SystemException {
		return customPageFeedbackPersistence.remove(customPageFeedbackPK);
	}

	/**
	 * Deletes the custom page feedback from the database. Also notifies the appropriate model listeners.
	 *
	 * @param customPageFeedback the custom page feedback
	 * @return the custom page feedback that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CustomPageFeedback deleteCustomPageFeedback(
		CustomPageFeedback customPageFeedback) throws SystemException {
		return customPageFeedbackPersistence.remove(customPageFeedback);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(CustomPageFeedback.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return customPageFeedbackPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link de.unipotsdam.elis.custompages.model.impl.CustomPageFeedbackModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return customPageFeedbackPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link de.unipotsdam.elis.custompages.model.impl.CustomPageFeedbackModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return customPageFeedbackPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return customPageFeedbackPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return customPageFeedbackPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public CustomPageFeedback fetchCustomPageFeedback(
		CustomPageFeedbackPK customPageFeedbackPK) throws SystemException {
		return customPageFeedbackPersistence.fetchByPrimaryKey(customPageFeedbackPK);
	}

	/**
	 * Returns the custom page feedback with the primary key.
	 *
	 * @param customPageFeedbackPK the primary key of the custom page feedback
	 * @return the custom page feedback
	 * @throws PortalException if a custom page feedback with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public CustomPageFeedback getCustomPageFeedback(
		CustomPageFeedbackPK customPageFeedbackPK)
		throws PortalException, SystemException {
		return customPageFeedbackPersistence.findByPrimaryKey(customPageFeedbackPK);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return customPageFeedbackPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the custom page feedbacks.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link de.unipotsdam.elis.custompages.model.impl.CustomPageFeedbackModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of custom page feedbacks
	 * @param end the upper bound of the range of custom page feedbacks (not inclusive)
	 * @return the range of custom page feedbacks
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<CustomPageFeedback> getCustomPageFeedbacks(int start, int end)
		throws SystemException {
		return customPageFeedbackPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of custom page feedbacks.
	 *
	 * @return the number of custom page feedbacks
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getCustomPageFeedbacksCount() throws SystemException {
		return customPageFeedbackPersistence.countAll();
	}

	/**
	 * Updates the custom page feedback in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param customPageFeedback the custom page feedback
	 * @return the custom page feedback that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CustomPageFeedback updateCustomPageFeedback(
		CustomPageFeedback customPageFeedback) throws SystemException {
		return customPageFeedbackPersistence.update(customPageFeedback);
	}

	/**
	 * Returns the custom page feedback local service.
	 *
	 * @return the custom page feedback local service
	 */
	public de.unipotsdam.elis.custompages.service.CustomPageFeedbackLocalService getCustomPageFeedbackLocalService() {
		return customPageFeedbackLocalService;
	}

	/**
	 * Sets the custom page feedback local service.
	 *
	 * @param customPageFeedbackLocalService the custom page feedback local service
	 */
	public void setCustomPageFeedbackLocalService(
		de.unipotsdam.elis.custompages.service.CustomPageFeedbackLocalService customPageFeedbackLocalService) {
		this.customPageFeedbackLocalService = customPageFeedbackLocalService;
	}

	/**
	 * Returns the custom page feedback remote service.
	 *
	 * @return the custom page feedback remote service
	 */
	public de.unipotsdam.elis.custompages.service.CustomPageFeedbackService getCustomPageFeedbackService() {
		return customPageFeedbackService;
	}

	/**
	 * Sets the custom page feedback remote service.
	 *
	 * @param customPageFeedbackService the custom page feedback remote service
	 */
	public void setCustomPageFeedbackService(
		de.unipotsdam.elis.custompages.service.CustomPageFeedbackService customPageFeedbackService) {
		this.customPageFeedbackService = customPageFeedbackService;
	}

	/**
	 * Returns the custom page feedback persistence.
	 *
	 * @return the custom page feedback persistence
	 */
	public CustomPageFeedbackPersistence getCustomPageFeedbackPersistence() {
		return customPageFeedbackPersistence;
	}

	/**
	 * Sets the custom page feedback persistence.
	 *
	 * @param customPageFeedbackPersistence the custom page feedback persistence
	 */
	public void setCustomPageFeedbackPersistence(
		CustomPageFeedbackPersistence customPageFeedbackPersistence) {
		this.customPageFeedbackPersistence = customPageFeedbackPersistence;
	}

	/**
	 * Returns the custom page feedback finder.
	 *
	 * @return the custom page feedback finder
	 */
	public CustomPageFeedbackFinder getCustomPageFeedbackFinder() {
		return customPageFeedbackFinder;
	}

	/**
	 * Sets the custom page feedback finder.
	 *
	 * @param customPageFeedbackFinder the custom page feedback finder
	 */
	public void setCustomPageFeedbackFinder(
		CustomPageFeedbackFinder customPageFeedbackFinder) {
		this.customPageFeedbackFinder = customPageFeedbackFinder;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("de.unipotsdam.elis.custompages.model.CustomPageFeedback",
			customPageFeedbackLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"de.unipotsdam.elis.custompages.model.CustomPageFeedback");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return CustomPageFeedback.class;
	}

	protected String getModelClassName() {
		return CustomPageFeedback.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = customPageFeedbackPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = de.unipotsdam.elis.custompages.service.CustomPageFeedbackLocalService.class)
	protected de.unipotsdam.elis.custompages.service.CustomPageFeedbackLocalService customPageFeedbackLocalService;
	@BeanReference(type = de.unipotsdam.elis.custompages.service.CustomPageFeedbackService.class)
	protected de.unipotsdam.elis.custompages.service.CustomPageFeedbackService customPageFeedbackService;
	@BeanReference(type = CustomPageFeedbackPersistence.class)
	protected CustomPageFeedbackPersistence customPageFeedbackPersistence;
	@BeanReference(type = CustomPageFeedbackFinder.class)
	protected CustomPageFeedbackFinder customPageFeedbackFinder;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private CustomPageFeedbackLocalServiceClpInvoker _clpInvoker = new CustomPageFeedbackLocalServiceClpInvoker();
}