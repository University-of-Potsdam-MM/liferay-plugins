/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.unipotsdam.elis.activities.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.unipotsdam.elis.activities.model.MoodleSocialActivity;
import de.unipotsdam.elis.activities.model.MoodleSocialActivityModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the MoodleSocialActivity service. Represents a row in the &quot;Activity_MoodleSocialActivity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.unipotsdam.elis.activities.model.MoodleSocialActivityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MoodleSocialActivityImpl}.
 * </p>
 *
 * @author Matthias
 * @see MoodleSocialActivityImpl
 * @see de.unipotsdam.elis.activities.model.MoodleSocialActivity
 * @see de.unipotsdam.elis.activities.model.MoodleSocialActivityModel
 * @generated
 */
public class MoodleSocialActivityModelImpl extends BaseModelImpl<MoodleSocialActivity>
	implements MoodleSocialActivityModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a moodle social activity model instance should use the {@link de.unipotsdam.elis.activities.model.MoodleSocialActivity} interface instead.
	 */
	public static final String TABLE_NAME = "Activity_MoodleSocialActivity";
	public static final Object[][] TABLE_COLUMNS = {
			{ "extSocialActivityId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "type_", Types.INTEGER },
			{ "extServiceActivityType", Types.VARCHAR },
			{ "extServiceContext", Types.VARCHAR },
			{ "data_", Types.CLOB },
			{ "published", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table Activity_MoodleSocialActivity (extSocialActivityId LONG not null primary key,userId LONG,type_ INTEGER,extServiceActivityType VARCHAR(75) null,extServiceContext VARCHAR(1000) null,data_ TEXT null,published LONG)";
	public static final String TABLE_SQL_DROP = "drop table Activity_MoodleSocialActivity";
	public static final String ORDER_BY_JPQL = " ORDER BY moodleSocialActivity.extSocialActivityId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Activity_MoodleSocialActivity.extSocialActivityId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.unipotsdam.elis.activities.model.MoodleSocialActivity"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.unipotsdam.elis.activities.model.MoodleSocialActivity"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.de.unipotsdam.elis.activities.model.MoodleSocialActivity"),
			true);
	public static long EXTSOCIALACTIVITYID_COLUMN_BITMASK = 1L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.unipotsdam.elis.activities.model.MoodleSocialActivity"));

	public MoodleSocialActivityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _extSocialActivityId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setExtSocialActivityId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _extSocialActivityId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MoodleSocialActivity.class;
	}

	@Override
	public String getModelClassName() {
		return MoodleSocialActivity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("extSocialActivityId", getExtSocialActivityId());
		attributes.put("userId", getUserId());
		attributes.put("type", getType());
		attributes.put("extServiceActivityType", getExtServiceActivityType());
		attributes.put("extServiceContext", getExtServiceContext());
		attributes.put("data", getData());
		attributes.put("published", getPublished());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long extSocialActivityId = (Long)attributes.get("extSocialActivityId");

		if (extSocialActivityId != null) {
			setExtSocialActivityId(extSocialActivityId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Integer type = (Integer)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		String extServiceActivityType = (String)attributes.get(
				"extServiceActivityType");

		if (extServiceActivityType != null) {
			setExtServiceActivityType(extServiceActivityType);
		}

		String extServiceContext = (String)attributes.get("extServiceContext");

		if (extServiceContext != null) {
			setExtServiceContext(extServiceContext);
		}

		String data = (String)attributes.get("data");

		if (data != null) {
			setData(data);
		}

		Long published = (Long)attributes.get("published");

		if (published != null) {
			setPublished(published);
		}
	}

	@Override
	public long getExtSocialActivityId() {
		return _extSocialActivityId;
	}

	@Override
	public void setExtSocialActivityId(long extSocialActivityId) {
		_columnBitmask |= EXTSOCIALACTIVITYID_COLUMN_BITMASK;

		if (!_setOriginalExtSocialActivityId) {
			_setOriginalExtSocialActivityId = true;

			_originalExtSocialActivityId = _extSocialActivityId;
		}

		_extSocialActivityId = extSocialActivityId;
	}

	public long getOriginalExtSocialActivityId() {
		return _originalExtSocialActivityId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public int getType() {
		return _type;
	}

	@Override
	public void setType(int type) {
		_type = type;
	}

	@Override
	public String getExtServiceActivityType() {
		if (_extServiceActivityType == null) {
			return StringPool.BLANK;
		}
		else {
			return _extServiceActivityType;
		}
	}

	@Override
	public void setExtServiceActivityType(String extServiceActivityType) {
		_extServiceActivityType = extServiceActivityType;
	}

	@Override
	public String getExtServiceContext() {
		if (_extServiceContext == null) {
			return StringPool.BLANK;
		}
		else {
			return _extServiceContext;
		}
	}

	@Override
	public void setExtServiceContext(String extServiceContext) {
		_extServiceContext = extServiceContext;
	}

	@Override
	public String getData() {
		if (_data == null) {
			return StringPool.BLANK;
		}
		else {
			return _data;
		}
	}

	@Override
	public void setData(String data) {
		_data = data;
	}

	@Override
	public long getPublished() {
		return _published;
	}

	@Override
	public void setPublished(long published) {
		_published = published;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			MoodleSocialActivity.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MoodleSocialActivity toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MoodleSocialActivity)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MoodleSocialActivityImpl moodleSocialActivityImpl = new MoodleSocialActivityImpl();

		moodleSocialActivityImpl.setExtSocialActivityId(getExtSocialActivityId());
		moodleSocialActivityImpl.setUserId(getUserId());
		moodleSocialActivityImpl.setType(getType());
		moodleSocialActivityImpl.setExtServiceActivityType(getExtServiceActivityType());
		moodleSocialActivityImpl.setExtServiceContext(getExtServiceContext());
		moodleSocialActivityImpl.setData(getData());
		moodleSocialActivityImpl.setPublished(getPublished());

		moodleSocialActivityImpl.resetOriginalValues();

		return moodleSocialActivityImpl;
	}

	@Override
	public int compareTo(MoodleSocialActivity moodleSocialActivity) {
		long primaryKey = moodleSocialActivity.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MoodleSocialActivity)) {
			return false;
		}

		MoodleSocialActivity moodleSocialActivity = (MoodleSocialActivity)obj;

		long primaryKey = moodleSocialActivity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		MoodleSocialActivityModelImpl moodleSocialActivityModelImpl = this;

		moodleSocialActivityModelImpl._originalExtSocialActivityId = moodleSocialActivityModelImpl._extSocialActivityId;

		moodleSocialActivityModelImpl._setOriginalExtSocialActivityId = false;

		moodleSocialActivityModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MoodleSocialActivity> toCacheModel() {
		MoodleSocialActivityCacheModel moodleSocialActivityCacheModel = new MoodleSocialActivityCacheModel();

		moodleSocialActivityCacheModel.extSocialActivityId = getExtSocialActivityId();

		moodleSocialActivityCacheModel.userId = getUserId();

		moodleSocialActivityCacheModel.type = getType();

		moodleSocialActivityCacheModel.extServiceActivityType = getExtServiceActivityType();

		String extServiceActivityType = moodleSocialActivityCacheModel.extServiceActivityType;

		if ((extServiceActivityType != null) &&
				(extServiceActivityType.length() == 0)) {
			moodleSocialActivityCacheModel.extServiceActivityType = null;
		}

		moodleSocialActivityCacheModel.extServiceContext = getExtServiceContext();

		String extServiceContext = moodleSocialActivityCacheModel.extServiceContext;

		if ((extServiceContext != null) && (extServiceContext.length() == 0)) {
			moodleSocialActivityCacheModel.extServiceContext = null;
		}

		moodleSocialActivityCacheModel.data = getData();

		String data = moodleSocialActivityCacheModel.data;

		if ((data != null) && (data.length() == 0)) {
			moodleSocialActivityCacheModel.data = null;
		}

		moodleSocialActivityCacheModel.published = getPublished();

		return moodleSocialActivityCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{extSocialActivityId=");
		sb.append(getExtSocialActivityId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", extServiceActivityType=");
		sb.append(getExtServiceActivityType());
		sb.append(", extServiceContext=");
		sb.append(getExtServiceContext());
		sb.append(", data=");
		sb.append(getData());
		sb.append(", published=");
		sb.append(getPublished());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("de.unipotsdam.elis.activities.model.MoodleSocialActivity");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>extSocialActivityId</column-name><column-value><![CDATA[");
		sb.append(getExtSocialActivityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>extServiceActivityType</column-name><column-value><![CDATA[");
		sb.append(getExtServiceActivityType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>extServiceContext</column-name><column-value><![CDATA[");
		sb.append(getExtServiceContext());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data</column-name><column-value><![CDATA[");
		sb.append(getData());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>published</column-name><column-value><![CDATA[");
		sb.append(getPublished());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MoodleSocialActivity.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			MoodleSocialActivity.class
		};
	private long _extSocialActivityId;
	private long _originalExtSocialActivityId;
	private boolean _setOriginalExtSocialActivityId;
	private long _userId;
	private String _userUuid;
	private int _type;
	private String _extServiceActivityType;
	private String _extServiceContext;
	private String _data;
	private long _published;
	private long _columnBitmask;
	private MoodleSocialActivity _escapedModel;
}