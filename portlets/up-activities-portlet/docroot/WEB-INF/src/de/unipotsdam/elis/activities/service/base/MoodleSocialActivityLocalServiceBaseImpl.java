/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.unipotsdam.elis.activities.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import de.unipotsdam.elis.activities.model.MoodleSocialActivity;
import de.unipotsdam.elis.activities.service.MoodleSocialActivityLocalService;
import de.unipotsdam.elis.activities.service.persistence.ExtSocialActivitySetFinder;
import de.unipotsdam.elis.activities.service.persistence.MoodleSocialActivityPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the moodle social activity local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link de.unipotsdam.elis.activities.service.impl.MoodleSocialActivityLocalServiceImpl}.
 * </p>
 *
 * @author Matthias
 * @see de.unipotsdam.elis.activities.service.impl.MoodleSocialActivityLocalServiceImpl
 * @see de.unipotsdam.elis.activities.service.MoodleSocialActivityLocalServiceUtil
 * @generated
 */
public abstract class MoodleSocialActivityLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements MoodleSocialActivityLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link de.unipotsdam.elis.activities.service.MoodleSocialActivityLocalServiceUtil} to access the moodle social activity local service.
	 */

	/**
	 * Adds the moodle social activity to the database. Also notifies the appropriate model listeners.
	 *
	 * @param moodleSocialActivity the moodle social activity
	 * @return the moodle social activity that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public MoodleSocialActivity addMoodleSocialActivity(
		MoodleSocialActivity moodleSocialActivity) throws SystemException {
		moodleSocialActivity.setNew(true);

		return moodleSocialActivityPersistence.update(moodleSocialActivity);
	}

	/**
	 * Creates a new moodle social activity with the primary key. Does not add the moodle social activity to the database.
	 *
	 * @param extSocialActivityId the primary key for the new moodle social activity
	 * @return the new moodle social activity
	 */
	@Override
	public MoodleSocialActivity createMoodleSocialActivity(
		long extSocialActivityId) {
		return moodleSocialActivityPersistence.create(extSocialActivityId);
	}

	/**
	 * Deletes the moodle social activity with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param extSocialActivityId the primary key of the moodle social activity
	 * @return the moodle social activity that was removed
	 * @throws PortalException if a moodle social activity with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public MoodleSocialActivity deleteMoodleSocialActivity(
		long extSocialActivityId) throws PortalException, SystemException {
		return moodleSocialActivityPersistence.remove(extSocialActivityId);
	}

	/**
	 * Deletes the moodle social activity from the database. Also notifies the appropriate model listeners.
	 *
	 * @param moodleSocialActivity the moodle social activity
	 * @return the moodle social activity that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public MoodleSocialActivity deleteMoodleSocialActivity(
		MoodleSocialActivity moodleSocialActivity) throws SystemException {
		return moodleSocialActivityPersistence.remove(moodleSocialActivity);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(MoodleSocialActivity.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return moodleSocialActivityPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link de.unipotsdam.elis.activities.model.impl.MoodleSocialActivityModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return moodleSocialActivityPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link de.unipotsdam.elis.activities.model.impl.MoodleSocialActivityModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return moodleSocialActivityPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return moodleSocialActivityPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return moodleSocialActivityPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public MoodleSocialActivity fetchMoodleSocialActivity(
		long extSocialActivityId) throws SystemException {
		return moodleSocialActivityPersistence.fetchByPrimaryKey(extSocialActivityId);
	}

	/**
	 * Returns the moodle social activity with the primary key.
	 *
	 * @param extSocialActivityId the primary key of the moodle social activity
	 * @return the moodle social activity
	 * @throws PortalException if a moodle social activity with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public MoodleSocialActivity getMoodleSocialActivity(
		long extSocialActivityId) throws PortalException, SystemException {
		return moodleSocialActivityPersistence.findByPrimaryKey(extSocialActivityId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return moodleSocialActivityPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the moodle social activities.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link de.unipotsdam.elis.activities.model.impl.MoodleSocialActivityModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of moodle social activities
	 * @param end the upper bound of the range of moodle social activities (not inclusive)
	 * @return the range of moodle social activities
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<MoodleSocialActivity> getMoodleSocialActivities(int start,
		int end) throws SystemException {
		return moodleSocialActivityPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of moodle social activities.
	 *
	 * @return the number of moodle social activities
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getMoodleSocialActivitiesCount() throws SystemException {
		return moodleSocialActivityPersistence.countAll();
	}

	/**
	 * Updates the moodle social activity in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param moodleSocialActivity the moodle social activity
	 * @return the moodle social activity that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public MoodleSocialActivity updateMoodleSocialActivity(
		MoodleSocialActivity moodleSocialActivity) throws SystemException {
		return moodleSocialActivityPersistence.update(moodleSocialActivity);
	}

	/**
	 * Returns the ext social activity set local service.
	 *
	 * @return the ext social activity set local service
	 */
	public de.unipotsdam.elis.activities.service.ExtSocialActivitySetLocalService getExtSocialActivitySetLocalService() {
		return extSocialActivitySetLocalService;
	}

	/**
	 * Sets the ext social activity set local service.
	 *
	 * @param extSocialActivitySetLocalService the ext social activity set local service
	 */
	public void setExtSocialActivitySetLocalService(
		de.unipotsdam.elis.activities.service.ExtSocialActivitySetLocalService extSocialActivitySetLocalService) {
		this.extSocialActivitySetLocalService = extSocialActivitySetLocalService;
	}

	/**
	 * Returns the ext social activity set finder.
	 *
	 * @return the ext social activity set finder
	 */
	public ExtSocialActivitySetFinder getExtSocialActivitySetFinder() {
		return extSocialActivitySetFinder;
	}

	/**
	 * Sets the ext social activity set finder.
	 *
	 * @param extSocialActivitySetFinder the ext social activity set finder
	 */
	public void setExtSocialActivitySetFinder(
		ExtSocialActivitySetFinder extSocialActivitySetFinder) {
		this.extSocialActivitySetFinder = extSocialActivitySetFinder;
	}

	/**
	 * Returns the moodle social activity local service.
	 *
	 * @return the moodle social activity local service
	 */
	public de.unipotsdam.elis.activities.service.MoodleSocialActivityLocalService getMoodleSocialActivityLocalService() {
		return moodleSocialActivityLocalService;
	}

	/**
	 * Sets the moodle social activity local service.
	 *
	 * @param moodleSocialActivityLocalService the moodle social activity local service
	 */
	public void setMoodleSocialActivityLocalService(
		de.unipotsdam.elis.activities.service.MoodleSocialActivityLocalService moodleSocialActivityLocalService) {
		this.moodleSocialActivityLocalService = moodleSocialActivityLocalService;
	}

	/**
	 * Returns the moodle social activity persistence.
	 *
	 * @return the moodle social activity persistence
	 */
	public MoodleSocialActivityPersistence getMoodleSocialActivityPersistence() {
		return moodleSocialActivityPersistence;
	}

	/**
	 * Sets the moodle social activity persistence.
	 *
	 * @param moodleSocialActivityPersistence the moodle social activity persistence
	 */
	public void setMoodleSocialActivityPersistence(
		MoodleSocialActivityPersistence moodleSocialActivityPersistence) {
		this.moodleSocialActivityPersistence = moodleSocialActivityPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("de.unipotsdam.elis.activities.model.MoodleSocialActivity",
			moodleSocialActivityLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"de.unipotsdam.elis.activities.model.MoodleSocialActivity");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return MoodleSocialActivity.class;
	}

	protected String getModelClassName() {
		return MoodleSocialActivity.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = moodleSocialActivityPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = de.unipotsdam.elis.activities.service.ExtSocialActivitySetLocalService.class)
	protected de.unipotsdam.elis.activities.service.ExtSocialActivitySetLocalService extSocialActivitySetLocalService;
	@BeanReference(type = ExtSocialActivitySetFinder.class)
	protected ExtSocialActivitySetFinder extSocialActivitySetFinder;
	@BeanReference(type = de.unipotsdam.elis.activities.service.MoodleSocialActivityLocalService.class)
	protected de.unipotsdam.elis.activities.service.MoodleSocialActivityLocalService moodleSocialActivityLocalService;
	@BeanReference(type = MoodleSocialActivityPersistence.class)
	protected MoodleSocialActivityPersistence moodleSocialActivityPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private MoodleSocialActivityLocalServiceClpInvoker _clpInvoker = new MoodleSocialActivityLocalServiceClpInvoker();
}