/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.unipotsdam.elis.language.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import de.unipotsdam.elis.language.model.LanguageKey;
import de.unipotsdam.elis.language.model.LanguageKeyModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LanguageKey service. Represents a row in the &quot;Language_LanguageKey&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.unipotsdam.elis.language.model.LanguageKeyModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LanguageKeyImpl}.
 * </p>
 *
 * @author Matthias
 * @see LanguageKeyImpl
 * @see de.unipotsdam.elis.language.model.LanguageKey
 * @see de.unipotsdam.elis.language.model.LanguageKeyModel
 * @generated
 */
public class LanguageKeyModelImpl extends BaseModelImpl<LanguageKey>
	implements LanguageKeyModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a language key model instance should use the {@link de.unipotsdam.elis.language.model.LanguageKey} interface instead.
	 */
	public static final String TABLE_NAME = "Language_LanguageKey";
	public static final Object[][] TABLE_COLUMNS = {
			{ "key_", Types.VARCHAR },
			{ "value", Types.CLOB }
		};
	public static final String TABLE_SQL_CREATE = "create table Language_LanguageKey (key_ VARCHAR(75) not null primary key,value TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table Language_LanguageKey";
	public static final String ORDER_BY_JPQL = " ORDER BY languageKey.key ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Language_LanguageKey.key_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.unipotsdam.elis.language.model.LanguageKey"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.unipotsdam.elis.language.model.LanguageKey"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.unipotsdam.elis.language.model.LanguageKey"));

	public LanguageKeyModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _key;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setKey(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _key;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return LanguageKey.class;
	}

	@Override
	public String getModelClassName() {
		return LanguageKey.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("key", getKey());
		attributes.put("value", getValue());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String key = (String)attributes.get("key");

		if (key != null) {
			setKey(key);
		}

		String value = (String)attributes.get("value");

		if (value != null) {
			setValue(value);
		}
	}

	@Override
	public String getKey() {
		if (_key == null) {
			return StringPool.BLANK;
		}
		else {
			return _key;
		}
	}

	@Override
	public void setKey(String key) {
		_key = key;
	}

	@Override
	public String getValue() {
		if (_value == null) {
			return StringPool.BLANK;
		}
		else {
			return _value;
		}
	}

	@Override
	public void setValue(String value) {
		_value = value;
	}

	@Override
	public LanguageKey toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LanguageKey)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LanguageKeyImpl languageKeyImpl = new LanguageKeyImpl();

		languageKeyImpl.setKey(getKey());
		languageKeyImpl.setValue(getValue());

		languageKeyImpl.resetOriginalValues();

		return languageKeyImpl;
	}

	@Override
	public int compareTo(LanguageKey languageKey) {
		String primaryKey = languageKey.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LanguageKey)) {
			return false;
		}

		LanguageKey languageKey = (LanguageKey)obj;

		String primaryKey = languageKey.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<LanguageKey> toCacheModel() {
		LanguageKeyCacheModel languageKeyCacheModel = new LanguageKeyCacheModel();

		languageKeyCacheModel.key = getKey();

		String key = languageKeyCacheModel.key;

		if ((key != null) && (key.length() == 0)) {
			languageKeyCacheModel.key = null;
		}

		languageKeyCacheModel.value = getValue();

		String value = languageKeyCacheModel.value;

		if ((value != null) && (value.length() == 0)) {
			languageKeyCacheModel.value = null;
		}

		return languageKeyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{key=");
		sb.append(getKey());
		sb.append(", value=");
		sb.append(getValue());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("de.unipotsdam.elis.language.model.LanguageKey");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>key</column-name><column-value><![CDATA[");
		sb.append(getKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>value</column-name><column-value><![CDATA[");
		sb.append(getValue());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LanguageKey.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			LanguageKey.class
		};
	private String _key;
	private String _value;
	private LanguageKey _escapedModel;
}