/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.unipotsdam.elis.portfolio.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.unipotsdam.elis.portfolio.model.Portfolio;
import de.unipotsdam.elis.portfolio.model.PortfolioModel;
import de.unipotsdam.elis.portfolio.model.PortfolioSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Portfolio service. Represents a row in the &quot;Portfolio_Portfolio&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.unipotsdam.elis.portfolio.model.PortfolioModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PortfolioImpl}.
 * </p>
 *
 * @author Matthias
 * @see PortfolioImpl
 * @see de.unipotsdam.elis.portfolio.model.Portfolio
 * @see de.unipotsdam.elis.portfolio.model.PortfolioModel
 * @generated
 */
@JSON(strict = true)
public class PortfolioModelImpl extends BaseModelImpl<Portfolio>
	implements PortfolioModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a portfolio model instance should use the {@link de.unipotsdam.elis.portfolio.model.Portfolio} interface instead.
	 */
	public static final String TABLE_NAME = "Portfolio_Portfolio";
	public static final Object[][] TABLE_COLUMNS = {
			{ "plid", Types.BIGINT },
			{ "publishmentType", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table Portfolio_Portfolio (plid LONG not null primary key,publishmentType INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table Portfolio_Portfolio";
	public static final String ORDER_BY_JPQL = " ORDER BY portfolio.plid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Portfolio_Portfolio.plid ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.unipotsdam.elis.portfolio.model.Portfolio"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.unipotsdam.elis.portfolio.model.Portfolio"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.de.unipotsdam.elis.portfolio.model.Portfolio"),
			true);
	public static long PLID_COLUMN_BITMASK = 1L;
	public static long PUBLISHMENTTYPE_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Portfolio toModel(PortfolioSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Portfolio model = new PortfolioImpl();

		model.setPlid(soapModel.getPlid());
		model.setPublishmentType(soapModel.getPublishmentType());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Portfolio> toModels(PortfolioSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Portfolio> models = new ArrayList<Portfolio>(soapModels.length);

		for (PortfolioSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.unipotsdam.elis.portfolio.model.Portfolio"));

	public PortfolioModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _plid;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPlid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _plid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Portfolio.class;
	}

	@Override
	public String getModelClassName() {
		return Portfolio.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("plid", getPlid());
		attributes.put("publishmentType", getPublishmentType());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long plid = (Long)attributes.get("plid");

		if (plid != null) {
			setPlid(plid);
		}

		Integer publishmentType = (Integer)attributes.get("publishmentType");

		if (publishmentType != null) {
			setPublishmentType(publishmentType);
		}
	}

	@JSON
	@Override
	public long getPlid() {
		return _plid;
	}

	@Override
	public void setPlid(long plid) {
		_columnBitmask |= PLID_COLUMN_BITMASK;

		if (!_setOriginalPlid) {
			_setOriginalPlid = true;

			_originalPlid = _plid;
		}

		_plid = plid;
	}

	public long getOriginalPlid() {
		return _originalPlid;
	}

	@JSON
	@Override
	public int getPublishmentType() {
		return _publishmentType;
	}

	@Override
	public void setPublishmentType(int publishmentType) {
		_columnBitmask |= PUBLISHMENTTYPE_COLUMN_BITMASK;

		if (!_setOriginalPublishmentType) {
			_setOriginalPublishmentType = true;

			_originalPublishmentType = _publishmentType;
		}

		_publishmentType = publishmentType;
	}

	public int getOriginalPublishmentType() {
		return _originalPublishmentType;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Portfolio.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Portfolio toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Portfolio)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PortfolioImpl portfolioImpl = new PortfolioImpl();

		portfolioImpl.setPlid(getPlid());
		portfolioImpl.setPublishmentType(getPublishmentType());

		portfolioImpl.resetOriginalValues();

		return portfolioImpl;
	}

	@Override
	public int compareTo(Portfolio portfolio) {
		long primaryKey = portfolio.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Portfolio)) {
			return false;
		}

		Portfolio portfolio = (Portfolio)obj;

		long primaryKey = portfolio.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PortfolioModelImpl portfolioModelImpl = this;

		portfolioModelImpl._originalPlid = portfolioModelImpl._plid;

		portfolioModelImpl._setOriginalPlid = false;

		portfolioModelImpl._originalPublishmentType = portfolioModelImpl._publishmentType;

		portfolioModelImpl._setOriginalPublishmentType = false;

		portfolioModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Portfolio> toCacheModel() {
		PortfolioCacheModel portfolioCacheModel = new PortfolioCacheModel();

		portfolioCacheModel.plid = getPlid();

		portfolioCacheModel.publishmentType = getPublishmentType();

		return portfolioCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{plid=");
		sb.append(getPlid());
		sb.append(", publishmentType=");
		sb.append(getPublishmentType());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("de.unipotsdam.elis.portfolio.model.Portfolio");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>plid</column-name><column-value><![CDATA[");
		sb.append(getPlid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishmentType</column-name><column-value><![CDATA[");
		sb.append(getPublishmentType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Portfolio.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Portfolio.class
		};
	private long _plid;
	private long _originalPlid;
	private boolean _setOriginalPlid;
	private int _publishmentType;
	private int _originalPublishmentType;
	private boolean _setOriginalPublishmentType;
	private long _columnBitmask;
	private Portfolio _escapedModel;
}