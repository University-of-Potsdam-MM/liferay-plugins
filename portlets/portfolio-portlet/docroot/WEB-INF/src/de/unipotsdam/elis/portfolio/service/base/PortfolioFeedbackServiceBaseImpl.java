/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.unipotsdam.elis.portfolio.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.service.BaseServiceImpl;
import com.liferay.portal.service.persistence.UserPersistence;

import de.unipotsdam.elis.portfolio.model.PortfolioFeedback;
import de.unipotsdam.elis.portfolio.service.PortfolioFeedbackService;
import de.unipotsdam.elis.portfolio.service.persistence.PortfolioFeedbackFinder;
import de.unipotsdam.elis.portfolio.service.persistence.PortfolioFeedbackPersistence;
import de.unipotsdam.elis.portfolio.service.persistence.PortfolioFinder;
import de.unipotsdam.elis.portfolio.service.persistence.PortfolioPersistence;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the portfolio feedback remote service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link de.unipotsdam.elis.portfolio.service.impl.PortfolioFeedbackServiceImpl}.
 * </p>
 *
 * @author Matthias
 * @see de.unipotsdam.elis.portfolio.service.impl.PortfolioFeedbackServiceImpl
 * @see de.unipotsdam.elis.portfolio.service.PortfolioFeedbackServiceUtil
 * @generated
 */
public abstract class PortfolioFeedbackServiceBaseImpl extends BaseServiceImpl
	implements PortfolioFeedbackService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link de.unipotsdam.elis.portfolio.service.PortfolioFeedbackServiceUtil} to access the portfolio feedback remote service.
	 */

	/**
	 * Returns the portfolio local service.
	 *
	 * @return the portfolio local service
	 */
	public de.unipotsdam.elis.portfolio.service.PortfolioLocalService getPortfolioLocalService() {
		return portfolioLocalService;
	}

	/**
	 * Sets the portfolio local service.
	 *
	 * @param portfolioLocalService the portfolio local service
	 */
	public void setPortfolioLocalService(
		de.unipotsdam.elis.portfolio.service.PortfolioLocalService portfolioLocalService) {
		this.portfolioLocalService = portfolioLocalService;
	}

	/**
	 * Returns the portfolio remote service.
	 *
	 * @return the portfolio remote service
	 */
	public de.unipotsdam.elis.portfolio.service.PortfolioService getPortfolioService() {
		return portfolioService;
	}

	/**
	 * Sets the portfolio remote service.
	 *
	 * @param portfolioService the portfolio remote service
	 */
	public void setPortfolioService(
		de.unipotsdam.elis.portfolio.service.PortfolioService portfolioService) {
		this.portfolioService = portfolioService;
	}

	/**
	 * Returns the portfolio persistence.
	 *
	 * @return the portfolio persistence
	 */
	public PortfolioPersistence getPortfolioPersistence() {
		return portfolioPersistence;
	}

	/**
	 * Sets the portfolio persistence.
	 *
	 * @param portfolioPersistence the portfolio persistence
	 */
	public void setPortfolioPersistence(
		PortfolioPersistence portfolioPersistence) {
		this.portfolioPersistence = portfolioPersistence;
	}

	/**
	 * Returns the portfolio finder.
	 *
	 * @return the portfolio finder
	 */
	public PortfolioFinder getPortfolioFinder() {
		return portfolioFinder;
	}

	/**
	 * Sets the portfolio finder.
	 *
	 * @param portfolioFinder the portfolio finder
	 */
	public void setPortfolioFinder(PortfolioFinder portfolioFinder) {
		this.portfolioFinder = portfolioFinder;
	}

	/**
	 * Returns the portfolio feedback local service.
	 *
	 * @return the portfolio feedback local service
	 */
	public de.unipotsdam.elis.portfolio.service.PortfolioFeedbackLocalService getPortfolioFeedbackLocalService() {
		return portfolioFeedbackLocalService;
	}

	/**
	 * Sets the portfolio feedback local service.
	 *
	 * @param portfolioFeedbackLocalService the portfolio feedback local service
	 */
	public void setPortfolioFeedbackLocalService(
		de.unipotsdam.elis.portfolio.service.PortfolioFeedbackLocalService portfolioFeedbackLocalService) {
		this.portfolioFeedbackLocalService = portfolioFeedbackLocalService;
	}

	/**
	 * Returns the portfolio feedback remote service.
	 *
	 * @return the portfolio feedback remote service
	 */
	public de.unipotsdam.elis.portfolio.service.PortfolioFeedbackService getPortfolioFeedbackService() {
		return portfolioFeedbackService;
	}

	/**
	 * Sets the portfolio feedback remote service.
	 *
	 * @param portfolioFeedbackService the portfolio feedback remote service
	 */
	public void setPortfolioFeedbackService(
		de.unipotsdam.elis.portfolio.service.PortfolioFeedbackService portfolioFeedbackService) {
		this.portfolioFeedbackService = portfolioFeedbackService;
	}

	/**
	 * Returns the portfolio feedback persistence.
	 *
	 * @return the portfolio feedback persistence
	 */
	public PortfolioFeedbackPersistence getPortfolioFeedbackPersistence() {
		return portfolioFeedbackPersistence;
	}

	/**
	 * Sets the portfolio feedback persistence.
	 *
	 * @param portfolioFeedbackPersistence the portfolio feedback persistence
	 */
	public void setPortfolioFeedbackPersistence(
		PortfolioFeedbackPersistence portfolioFeedbackPersistence) {
		this.portfolioFeedbackPersistence = portfolioFeedbackPersistence;
	}

	/**
	 * Returns the portfolio feedback finder.
	 *
	 * @return the portfolio feedback finder
	 */
	public PortfolioFeedbackFinder getPortfolioFeedbackFinder() {
		return portfolioFeedbackFinder;
	}

	/**
	 * Sets the portfolio feedback finder.
	 *
	 * @param portfolioFeedbackFinder the portfolio feedback finder
	 */
	public void setPortfolioFeedbackFinder(
		PortfolioFeedbackFinder portfolioFeedbackFinder) {
		this.portfolioFeedbackFinder = portfolioFeedbackFinder;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();
	}

	public void destroy() {
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return PortfolioFeedback.class;
	}

	protected String getModelClassName() {
		return PortfolioFeedback.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = portfolioFeedbackPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = de.unipotsdam.elis.portfolio.service.PortfolioLocalService.class)
	protected de.unipotsdam.elis.portfolio.service.PortfolioLocalService portfolioLocalService;
	@BeanReference(type = de.unipotsdam.elis.portfolio.service.PortfolioService.class)
	protected de.unipotsdam.elis.portfolio.service.PortfolioService portfolioService;
	@BeanReference(type = PortfolioPersistence.class)
	protected PortfolioPersistence portfolioPersistence;
	@BeanReference(type = PortfolioFinder.class)
	protected PortfolioFinder portfolioFinder;
	@BeanReference(type = de.unipotsdam.elis.portfolio.service.PortfolioFeedbackLocalService.class)
	protected de.unipotsdam.elis.portfolio.service.PortfolioFeedbackLocalService portfolioFeedbackLocalService;
	@BeanReference(type = de.unipotsdam.elis.portfolio.service.PortfolioFeedbackService.class)
	protected de.unipotsdam.elis.portfolio.service.PortfolioFeedbackService portfolioFeedbackService;
	@BeanReference(type = PortfolioFeedbackPersistence.class)
	protected PortfolioFeedbackPersistence portfolioFeedbackPersistence;
	@BeanReference(type = PortfolioFeedbackFinder.class)
	protected PortfolioFeedbackFinder portfolioFeedbackFinder;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private PortfolioFeedbackServiceClpInvoker _clpInvoker = new PortfolioFeedbackServiceClpInvoker();
}