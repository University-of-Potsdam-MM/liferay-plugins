/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.unipotsdam.elis.portfolio.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import de.unipotsdam.elis.portfolio.model.PortfolioPermission;
import de.unipotsdam.elis.portfolio.model.PortfolioPermissionModel;
import de.unipotsdam.elis.portfolio.model.PortfolioPermissionSoap;
import de.unipotsdam.elis.portfolio.service.persistence.PortfolioPermissionPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PortfolioPermission service. Represents a row in the &quot;Portfolio_PortfolioPermission&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.unipotsdam.elis.portfolio.model.PortfolioPermissionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PortfolioPermissionImpl}.
 * </p>
 *
 * @author Matthias
 * @see PortfolioPermissionImpl
 * @see de.unipotsdam.elis.portfolio.model.PortfolioPermission
 * @see de.unipotsdam.elis.portfolio.model.PortfolioPermissionModel
 * @generated
 */
@JSON(strict = true)
public class PortfolioPermissionModelImpl extends BaseModelImpl<PortfolioPermission>
	implements PortfolioPermissionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a portfolio permission model instance should use the {@link de.unipotsdam.elis.portfolio.model.PortfolioPermission} interface instead.
	 */
	public static final String TABLE_NAME = "Portfolio_PortfolioPermission";
	public static final Object[][] TABLE_COLUMNS = {
			{ "plid", Types.BIGINT },
			{ "userId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table Portfolio_PortfolioPermission (plid LONG not null,userId LONG not null,primary key (plid, userId))";
	public static final String TABLE_SQL_DROP = "drop table Portfolio_PortfolioPermission";
	public static final String ORDER_BY_JPQL = " ORDER BY portfolioPermission.id.plid ASC, portfolioPermission.id.userId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Portfolio_PortfolioPermission.plid ASC, Portfolio_PortfolioPermission.userId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.unipotsdam.elis.portfolio.model.PortfolioPermission"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.unipotsdam.elis.portfolio.model.PortfolioPermission"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.de.unipotsdam.elis.portfolio.model.PortfolioPermission"),
			true);
	public static long PLID_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static PortfolioPermission toModel(PortfolioPermissionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		PortfolioPermission model = new PortfolioPermissionImpl();

		model.setPlid(soapModel.getPlid());
		model.setUserId(soapModel.getUserId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<PortfolioPermission> toModels(
		PortfolioPermissionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<PortfolioPermission> models = new ArrayList<PortfolioPermission>(soapModels.length);

		for (PortfolioPermissionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.unipotsdam.elis.portfolio.model.PortfolioPermission"));

	public PortfolioPermissionModelImpl() {
	}

	@Override
	public PortfolioPermissionPK getPrimaryKey() {
		return new PortfolioPermissionPK(_plid, _userId);
	}

	@Override
	public void setPrimaryKey(PortfolioPermissionPK primaryKey) {
		setPlid(primaryKey.plid);
		setUserId(primaryKey.userId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new PortfolioPermissionPK(_plid, _userId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((PortfolioPermissionPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return PortfolioPermission.class;
	}

	@Override
	public String getModelClassName() {
		return PortfolioPermission.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("plid", getPlid());
		attributes.put("userId", getUserId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long plid = (Long)attributes.get("plid");

		if (plid != null) {
			setPlid(plid);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}
	}

	@JSON
	@Override
	public long getPlid() {
		return _plid;
	}

	@Override
	public void setPlid(long plid) {
		_columnBitmask |= PLID_COLUMN_BITMASK;

		if (!_setOriginalPlid) {
			_setOriginalPlid = true;

			_originalPlid = _plid;
		}

		_plid = plid;
	}

	public long getOriginalPlid() {
		return _originalPlid;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public PortfolioPermission toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PortfolioPermission)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PortfolioPermissionImpl portfolioPermissionImpl = new PortfolioPermissionImpl();

		portfolioPermissionImpl.setPlid(getPlid());
		portfolioPermissionImpl.setUserId(getUserId());

		portfolioPermissionImpl.resetOriginalValues();

		return portfolioPermissionImpl;
	}

	@Override
	public int compareTo(PortfolioPermission portfolioPermission) {
		PortfolioPermissionPK primaryKey = portfolioPermission.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PortfolioPermission)) {
			return false;
		}

		PortfolioPermission portfolioPermission = (PortfolioPermission)obj;

		PortfolioPermissionPK primaryKey = portfolioPermission.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		PortfolioPermissionModelImpl portfolioPermissionModelImpl = this;

		portfolioPermissionModelImpl._originalPlid = portfolioPermissionModelImpl._plid;

		portfolioPermissionModelImpl._setOriginalPlid = false;

		portfolioPermissionModelImpl._originalUserId = portfolioPermissionModelImpl._userId;

		portfolioPermissionModelImpl._setOriginalUserId = false;

		portfolioPermissionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PortfolioPermission> toCacheModel() {
		PortfolioPermissionCacheModel portfolioPermissionCacheModel = new PortfolioPermissionCacheModel();

		portfolioPermissionCacheModel.plid = getPlid();

		portfolioPermissionCacheModel.userId = getUserId();

		return portfolioPermissionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{plid=");
		sb.append(getPlid());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("de.unipotsdam.elis.portfolio.model.PortfolioPermission");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>plid</column-name><column-value><![CDATA[");
		sb.append(getPlid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PortfolioPermission.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			PortfolioPermission.class
		};
	private long _plid;
	private long _originalPlid;
	private boolean _setOriginalPlid;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _columnBitmask;
	private PortfolioPermission _escapedModel;
}